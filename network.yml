Parameters:
  VpcCIDR:
    Description: Please enter IP range (CIDR notation), we want to have the option to change the IP so never hardcode values, you do this using parameters file
    Type: String
    Default: 10.0.0.0/16

  EnvironmentName:
    Type: String
  
  PublicSubnet1CIDR:
    Description: Please enter IP range (CIDR notation), we want to have the option to change the IP so never hardcode values, you do this using parameters file
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter IP range (CIDR notation), we want to have the option to change the IP so never hardcode values, you do this using parameters file
    Type: String
    Default: 10.0.1.0/24
    
  PrivateSubnet1CIDR:
    Description: Please enter IP range (CIDR notation), we want to have the option to change the IP so never hardcode values, you do this using parameters file
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: Please enter IP range (CIDR notation), we want to have the option to change the IP so never hardcode values, you do this using parameters file
    Type: String
    Default: 10.0.3.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VPC

  # we need this to attach the IGW to the VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      # we referencing here another resource which is VPC
      VpcId: !Ref VPC
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Select function will pick a value from list that you provide
      # function GetAZs will get you a list of AZs that are available to you in this particular geographical area 
      # PublicSubnet1 will take value of index 0, which is different than PublicSubnet2 which will take index number 1
      AvailabilityZone: !Select [0, !GetAZs '']
      # it has to be subnet or subnetwork of the overall VPC, i.e. VPC is 10.0.0.0/16 so the subnet will be subset of the specific subnets for example 10.0.0.1 or 2 or 3 .. etc
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      # it means if you deploy a server is it automatically going to get a public IP or not.
      # It doesn't really matter bec of the routing we're going to assign to the private subnets  even if you by mistake you assign public IP it won't be routable from the outside (bec of the routing rules)
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  # Elastic IP 1
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    # it means don't create EIP unless InternetGatewayAttachment is created, (depends on it in the same script), bec EIP doesn't make any sense unlss you can reach it
    DependsOn: InternetGatewayAttachment
    # DependsOn attribute is used to protect your dependencies from being created w/o the proper requirements 
    Properties:
      Domain: vpc
  
 # Elastic IP 2
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # the reason why we need to allocate elastic IP for me is: once you allocate it it will never change, so even for a simple maintenance, restart, IPs will change so that will throw off and thing that depends on this particular IP
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      # ConnectivityType: public
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      # ConnectivityType: public
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    # a hint to cloudformation, good guarantee that this will be used when the internet gateway is attached to the VPC
    DependsOn: InternetGatewayAttachment
    Properties:
      # attach it to the table we created 
      RouteTableId: !Ref PublicRouteTable
      # wildcard address, all addresses, means send all traffic over here
      # Another thing: Routes go from the very specific to the least specific so when going to 10.0.1.0 in the subnet it will go to it and ignoe the 0.0.0.0 rule, but for example when going to udacity.com so it will go there 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # we will apply the same route table (contaning same route rules) to 2 subnets using Association resource
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)
  
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      # this will keep traffic for the private subnets within the VPC
      # Private subnets have no IPs so even if they are places in a public subnet you won't be able to reach it bec they have no IP
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  # why creating another table when you could have used the same one? this is fot future expansion, when subnets get more complex you don't want to add one rule that could break everything
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)
  
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

Outputs:
  # the container
  VPC:
    Description: Reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  VPCPublicRouteTable:
    Description: Public Routing
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${EnvironmentName}-PUB-RT

  VPCPrivateRouteTable1:
    Description: Private Routing AZ1
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub ${EnvironmentName}-PRI1-RT

  VPCPrivateRouteTable2:
    Description: Private Routing AZ2
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub ${EnvironmentName}-PRI2-RT

  PublicSubnets:
    Description: A list of the public subnets
    # we're creating a list, some resources like autoscaling grp or load balancer will need a list of resource so we're thinking ahead of our time
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub ${EnvironmentName}-PUB-SUBNETS

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub ${EnvironmentName}-PRI-SUBNETS

  PublicSubnet1:
    Description: A reference to the public subent in AZ1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PUB1-SN

  PublicSubnet2:
    Description: A reference to the public subent in AZ2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUB2-SN

  PrivateSubnet1:
    Description: A reference to the private subent in AZ1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PRI1-SN

  PrivateSubnet2:
    Description: A reference to the private subent in AZ2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PRI2-SN

  
  
