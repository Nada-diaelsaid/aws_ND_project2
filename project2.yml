Parameters:
  EnvironmentName:
    Type: String
  
  myAMI:
    Type: String

  http:
    Type: String

Resources:
  WebServerSecurityGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and ssh from local only
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  LBSecurityGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # - IpProtocol: tcp
      #   FromPort: 8080
      #   ToPort: 8080
      #   CidrIp: 0.0.0.0/0

  InstanceProfileS3ReadOnly:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Project2-S3ReadOnly

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          sudo apt install curl -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip -y
          unzip awscliv2.zip
          sudo ./aws/install
          cd /var/www/html
          sudo rm index.html
          aws s3 cp s3://project2-nada-701818746723/index.html index.html
          nano index.html
      # ubuntu 18.04 LTS     
      ImageId: !Ref myAMI
      # KeyName: private-server-devops-key
      SecurityGroups:
      - Ref: WebServerSecurityGrp
      # 4 RAM, 2 vCPU
      InstanceType: t3.medium
      IamInstanceProfile: !Ref InstanceProfileS3ReadOnly
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRI-SUBNETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecurityGrp

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP
  
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        # we only have one application here
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # main page of webserver
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"



Outputs:
  LoadBalancerURL:
    Description: export DNS name (URL) of the load balancer
    Value:
      # !Sub "${http} !GetAtt WebAppLoadBalancer.DNSName"
      Fn::Sub:
        - ${http}${ELB_DNS}
        - {http: !Ref http, ELB_DNS: !GetAtt WebAppLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}-ELB-URL